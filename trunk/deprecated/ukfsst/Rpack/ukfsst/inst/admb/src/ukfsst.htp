#if !defined(_ukfsst_)
#  define _ukfsst_

class model_data : public ad_comm{
  data_int npoint;
  data_int release_point;
  data_int recap_point;
  data_int u_active;
  data_int v_active;
  data_int D_active;
  data_int bx_active;
  data_int by_active;
  data_int bsst_active;
  data_int vx_active;
  data_int vy_active;
  data_int vsst_active;
  data_int a0_active;
  data_int b0_active;
  data_int r_active;
  data_number init_u;
  data_number init_v;
  data_number init_D;
  data_number init_bx;
  data_number init_by;
  data_number init_bsst;
  data_number init_vx;
  data_number init_vy;
  data_number init_vsst;
  data_number init_a0;
  data_number init_b0;
  data_number init_r;
  data_int var_struct;
  int stateDim;
  int nphase;
  dvector solar_date;
  int gsolstice;
  data_matrix dat_mat;
  data_int nobs;
  data_matrix obs_mat_data;
  dmatrix obs_mat;
  double start_long;
  data_int noOfSstFiles;
  data_imatrix sstdatemat;
  dvector sstSolarDate;
  ivector idx1;
  ivector idx2;
  d3_array P;
  d3_array PP;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number uu;
  param_init_bounded_number vv;
  param_init_bounded_number D;
  param_init_bounded_number vx;
  param_init_bounded_number vy;
  param_init_bounded_number vsst;
  param_init_bounded_number bx;
  param_init_bounded_number by;
  param_init_bounded_number bsst;
  param_init_bounded_number a0;
  param_init_bounded_number b0;
  param_init_bounded_number radius;
  objective_function_value nLogL;
  param_stddev_number sduu;
  param_stddev_number sdvv;
  param_stddev_number sdD;
  param_stddev_number sdbx;
  param_stddev_number sdby;
  param_stddev_number sdbsst;
  param_stddev_number sdvx;
  param_stddev_number sdvy;
  param_stddev_number sdvsst;
  param_stddev_number sdr;
  param_matrix X;
  param_matrix V;
  param_vector lonlat0;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
 dvariable wave(_CONST dvar_vector& w, _CONST dvector& p);
 dvariable weight(dvariable& distsq, dvariable& radsq);
 dvariable getSST(const dvariable& time, dvariable lon, dvariable lat, dvariable rad);
 dvar_vector z(const dvar_vector& alpha);
 dvar_vector zInv(const dvar_vector& y);
 dvar_vector F(const dvar_vector& x, const double& dt);
 dvar_matrix Q(const double& dt);
 dvar_vector G(const dvar_vector& x, const dmatrix& data);
 dvar_vector Glast(const dvar_vector& x, const dmatrix& data);
 dvar_matrix R(const dmatrix& data);
 dvariable unscentedKalmanFilter(const dvar_vector& x0, const dvar_matrix& varx0, const dmatrix& data, const ivector&  idx1, const ivector& idx2, const dvector& times, dvar_matrix& X, dvar_matrix& V, d3_array& Pall, d3_array& PPall, const double& kappa);

};
#endif
