#if !defined(_kftrack_)
#  define _kftrack_

class model_data : public ad_comm{
  data_int npoint;
  data_int release_point;
  data_int recap_point;
  int dt;
  int N;
  int m;
  data_int u_active;
  data_int v_active;
  data_int D_active;
  data_int bx_active;
  data_int by_active;
  data_int vx_active;
  data_int vy_active;
  data_int a0_active;
  data_int b0_active;
  data_int vscale_active;
  data_number init_u;
  data_number init_v;
  data_number init_D;
  data_number init_bx;
  data_number init_by;
  data_number init_vx;
  data_number init_vy;
  data_number init_a0;
  data_number init_b0;
  data_number init_vscale;
  data_int cos_errors;
  data_int dev_errors;
  data_number vy_dev_penalty_wt;
  data_int specified;
  int nphase;
  dmatrix Y;
  dmatrix y_deg;
  dmatrix P0;
  dvector solar_date;
  dvector vy_t;
  int gsolstice;
  data_matrix dat_mat;
  double start_long;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_matrix a;
  param_matrix a1;
  param_matrix aSmooth;
  param_matrix T;
  param_matrix TT;
  param_vector d;
  param_matrix c;
  param_matrix Q;
  param_matrix H;
  param_matrix v;
  param_3array P;
  param_3array P1;
  param_3array PSmooth;
  param_3array PSmoothTrans;
  param_3array PStar;
  param_matrix ySmooth;
  param_vector next_y;
  param_init_bounded_number uu;
  param_init_bounded_number vv;
  param_init_bounded_number D;
  param_init_bounded_number vx;
  param_init_bounded_number vy;
  param_init_bounded_number bx;
  param_init_bounded_number by;
  param_init_bounded_number a0;
  param_init_bounded_number b0;
  param_init_bounded_number vscale;
  param_init_bounded_vector vy_dev;
  param_matrix Z;
  objective_function_value f;
  param_number kalman_like;
  param_number recap_err;
  param_number gc_recap_err;
  param_number e1;
  param_number e2;
  param_number e3;
  param_number e4;
  param_stddev_number sduu;
  param_stddev_number sdvv;
  param_stddev_number sdD;
  param_stddev_number sdbx;
  param_stddev_number sdby;
  param_stddev_number sdvx;
  param_stddev_number sdvy;
  param_stddev_number vxy;
  param_stddev_number hdg;
  param_stddev_number spd;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void setup_d(void);
  void setup_Q(void);
  void setup_H(void);
 dvar_vector varA(dvar_matrix Y);
 dvar_vector z(dvar_vector alpha);
 dvar_vector zInv(dvar_vector y);
 dvar_matrix ZHatFun(dvar_vector a);
 dvariable kalman_filter(void);

};
#endif
